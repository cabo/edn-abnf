seq             = S [item S *(OC item S) OC]{
  def ast
    r = if e = elements[1].elements
          [e[0].ast] + e[2].elements.map {|x| x.item.ast }
        else
          []
        end
    if r.size == 1
      r.first
    else
      CBOR::Sequence.new(r)
    end
  end
}
item            = map / array / tagged
                / number / simple
                / string / streamstring

string1         = (tstr / bstr) spec{
  def ast
    if ei = spec.text_value[1..-1]
       warn "*** ignoring unimplemented encoding indicator #{ei.inspect} for #{elements[0].text_value}"
    end
    elements[0].ast
  end
}
string1e        = string1 / ellipsis
ellipsis        = 3*"."{ def ast; CBOR::Tagged.new(888, nil) end
} ; "..." or more dots
string          = string1e *(S "+" S string1e){
  def join1(s)
    s.join # XXX -- look at encoding and ei
  end
  def unpack_chunk(c, s)
    if c == String
      join1(s)
    else
      unless c == CBOR::Tagged && s.first.tag == 888 && s.first.value == nil # XXX check all values?
        raise "*** unjoinable chunks #{c.inspect} #{s.inspect}" if s.size != 1
      end
      s.first
    end
  end
  def ast
    arr = [elements[0].ast] + elements[1].elements.map {|x| x.elements[3].ast}
    charr = arr.chunk(&:class).to_a
    if charr.size == 1
      unpack_chunk(*charr.first)
    else
      CBOR::Tagged.new(888, charr.map {|x| unpack_chunk(*x)})
    end
  end
}

number          = (hexfloat / hexint / octint / binint
                   / decnumber / nonfin) spec{
  def ast
    val = elements[0].ast

    if ei = spec.text_value[1..-1]
       # warn "*** implementing encoding indicator #{ei.inspect} for #{elements[0].text_value}"
       val = CBOR::Box.from_number(val, {ei: ei})
    end
    val
  end
}
sign            = "+" / "-"
decnumber       = [sign] (1*DIGIT ["." *DIGIT] / "." 1*DIGIT)
                         ["e" [sign] 1*DIGIT]{
  def ast
    tv = text_value
    if /[.e]/i =~ tv
      sp = elements[0].text_value
      mp = elements[1].text_value.sub(/\A\./, "0.").sub(/\.\z/, ".0")
      ep = elements[2].text_value
      (sp + mp + ep).to_f
    else
      tv.to_i
    end
  end
}
hexfloat        = [sign] "0x" (1*HEXDIG ["." *HEXDIG] / "." 1*HEXDIG)
                         "p" [sign] 1*DIGIT{
  def ast; Float(text_value.sub(/x\./i, "x0.").sub(/\.p/i, ".0p")) end}
hexint          = [sign] "0x" 1*HEXDIG{ def ast; Integer(text_value) end}
octint          = [sign] "0o" 1*ODIGIT{ def ast; Integer(text_value) end}
binint          = [sign] "0b" 1*BDIGIT{ def ast; Integer(text_value) end}
nonfin          = %s"Infinity"{ def ast; Float::INFINITY end }
                / %s"-Infinity"{ def ast; -Float::INFINITY end }
                / %s"NaN"{ def ast; Float::NAN end }
simple          = %s"false"{ def ast; false end }
                / %s"true"{ def ast; true end }
                / %s"null"{ def ast; nil end }
                / %s"undefined"{ def ast; CBOR::Simple.new(23) end }
                / %s"simple(" S item S ")"{
                  def ast; CBOR::Simple.new(item.ast) end
                }
uint            = "0" / DIGIT1 *DIGIT
tagged          = uint spec "(" S item S ")"{
  def ast
    if ei = spec.text_value[1..-1]
       warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after tag number #{uint.text_value}"
    end
    CBOR::Tagged.new(uint.text_value.to_i, item.ast)
  end
}

app-prefix      = lcalpha *lcalnum ; including h and b64
                / ucalpha *ucalnum ; tagged variant, if defined
app-string      = app-prefix sqstr{
  def ast                       # XXX ignoring h and b64
    data = sqstr.ast.force_encoding(Encoding::UTF_8) # XXX undo .b
    app = app_prefix.text_value
    # Find a better place to put a default initialization
    EDNGRAMMAR.const_set(:APPS, Hash.new { |h, k|
                           h[k] = begin ::CBOR_DIAG.const_get("App_#{k.downcase}")

                                  rescue NameError
                                    raise ArgumentError, "cbor-diagnostic: Unknown application-oriented extension '#{k}'", caller
                                  end
                         }) unless ::EDNGRAMMAR.const_defined?(:APPS)
    ::EDNGRAMMAR::APPS[app].decode(app, data)
  end
}
sqstr           = "'" *single-quoted "'"{
  def ast
    elements[1].elements.map {|x| x.ast}.join.b # XXX .b
  end
}
bstr            = app-string / sqstr / embedded
                  ; app-string could be any type
tstr            = DQUOTE *double-quoted DQUOTE{
  def ast
    elements[1].elements.map {|x| x.ast}.join
  end
}
embedded        = "<<" seq ">>"{
  def ast
    sn = seq.ast
    if CBOR::Sequence === sn
      sn.to_cborseq
    else
      CBOR.encode(sn)
    end
  end
}

array           = "[" spec S [item S *(OC item S) OC] "]"{
  def ast
    r = if e = elements[3].elements
          [e[0].ast] + e[2].elements.map {|x| x.item.ast }
        else
          []
        end
    if ei = spec.text_value[1..-1]
       #       warn "** ei #{ei.inspect}"
       if ei == ""
         r.cbor_stream!
       else
         warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after ["
       end
    end
    r
  end
}
map             = "{" spec S [kp S *(OC kp S) OC] "}"{
  def ast
    r = if e = elements[3].elements
          Hash[ [e[0].ast] + e[2].elements.map {|x| x.kp.ast } ]
        else
          {}
        end
    if ei = spec.text_value[1..-1]
       if ei == ""
         r.cbor_stream!
       else
         warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after \x7b"
       end
    end
    r
  end
}
kp              = item S ":" S item{
  def ast
    [elements[0].ast, elements[4].ast]
  end
}

; We allow %x09 HT in prose, but not in strings
blank           = %x09 / %x0A / %x0D / %x20
non-slash       = blank / %x21-2e / %x30-D7FF / %xE000-10FFFF
non-lf          = %x09 / %x0D / %x20-D7FF / %xE000-10FFFF
S               = *blank *(comment *blank)
comment         = "/" *non-slash "/"
                / "#" *non-lf %x0A

; optional comma (ignored)
OC              = ["," S]

; check semantically that strings are either all text or all bytes
; note that there must be at least one string to distinguish
streamstring    = "(_" S string S *(OC string S) OC ")"{
  def ast
    strings = [elements[2].ast] + elements[4].elements.map {|x| x.string.ast }
    unless Set[*strings.map(&:encoding)].size == 1
      warn "*** mixed streamstring #{strings.cbor_diagnostic}"
    end
    strings.join.cbor_stream!(strings.map(&:size))
  end
}
spec            = ["_" *wordchar]

double-quoted   = unescaped{def ast; text_value.gsub("\r", "") end}
                / "'"{def ast; text_value end}
                / "\" DQUOTE{def ast; elements[1].text_value end}
                / "\" escapable{def ast; escapable.ast end}

single-quoted   = unescaped{def ast; text_value.gsub("\r", "") end}
                / DQUOTE{def ast; text_value end}
                / "\" "'"{def ast; elements[1].text_value end}
                / "\" escapable{def ast; escapable.ast end}

escapable       = %s"b"{def ast; "\b" end} ; BS backspace U+0008
                / %s"f"{def ast; "\f" end} ; FF form feed U+000C
                / %s"n"{def ast; "\n" end} ; LF line feed U+000A
                / %s"r"{def ast; "\r" end} ; CR carriage return U+000D
                / %s"t"{def ast; "\t" end} ; HT horizontal tab U+0009
                / "/"{def ast; text_value end}   ; / slash (solidus) U+002F (JSON!)
                / "\"{def ast; text_value end}   ; \ backslash (reverse solidus) U+005C
                / (%s"u" hexchar){def ast; hexchar.ast end} ;  uXXXX      U+XXXX

hexchar         = "{" (1*"0" [ hexscalar ] / hexscalar) "}"{def ast; elements[1].hex_value.chr(Encoding::UTF_8) end}
                / non-surrogate{def ast; hex_value.chr(Encoding::UTF_8) end}
                / (high-surrogate "\" %s"u" low-surrogate){
  def ast
    ((high_surrogate.ast << 10) + low_surrogate.ast + 0x10000).chr(Encoding::UTF_8)
  end
}
non-surrogate   = ((DIGIT / "A"/"B"/"C" / "E"/"F") 3HEXDIG)
                / ("D" ODIGIT 2HEXDIG )
high-surrogate  = "D" ("8"/"9"/"A"/"B") 2HEXDIG{def ast; hex_value - 0xD800 end}
low-surrogate   = "D" ("C"/"D"/"E"/"F") 2HEXDIG{def ast; hex_value - 0xDC00 end}
hexscalar       = "10" 4HEXDIG / HEXDIG1 4HEXDIG
                / non-surrogate / 1*3HEXDIG

; Note that no other C0 characters are allowed, including %x09 HT
unescaped       = %x0A ; new line
                / %x0D ; carriage return -- ignored on input
                / %x20-21
                     ; omit 0x22 "
                / %x23-26
                     ; omit 0x27 '
                / %x28-5B
                     ; omit 0x5C \
                / %x5D-D7FF ; skip surrogate code points
                / %xE000-10FFFF

DQUOTE          = %x22    ; " double quote
DIGIT           = %x30-39 ; 0-9
DIGIT1          = %x31-39 ; 1-9
ODIGIT          = %x30-37 ; 0-7
BDIGIT          = %x30-31 ; 0-1
HEXDIG          = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
HEXDIG1         = DIGIT1 / "A" / "B" / "C" / "D" / "E" / "F"
; Note: double-quoted strings as in "A" are case-insensitive in ABNF
lcalpha         = %x61-7A ; a-z
lcalnum         = lcalpha / DIGIT
ucalpha         = %x41-5A ; A-Z
ucalnum         = ucalpha / DIGIT
wordchar        = "_" / lcalnum / ucalpha ; [_a-z0-9A-Z]
