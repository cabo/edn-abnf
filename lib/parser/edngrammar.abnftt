seq             = S [item *(MSC item) SOC]{
  def ast
    r = if e = elements[1].elements
          [e[0].ast] + e[1].elements.map {|x| x.item.ast }
        else
          []
        end
    if r.size == 1
      r.first
    else
      CBOR::Sequence.new(r)
    end
  end
}
item            = map / array / tagged
                / number / simple
                / string / streamstring

string1         = (tstr / bstr) spec{
  def ast
    if ei = spec.text_value[1..-1]
       warn "*** ignoring unimplemented encoding indicator #{ei.inspect} for #{elements[0].text_value}"
    end
    elements[0].ast
  end
}
string1e        = string1 / ellipsis
ellipsis        = 3*"."{ def ast; CBOR::Tagged.new(888, nil) end
} ; "..." or more dots
string          = string1e *(S "+" S string1e){
  def join1(s)
    s.join # XXX -- look at encoding and ei
  end
  def unpack_chunk(c, s)
    if c == String
      join1(s)
    else
      unless c == CBOR::Tagged && s.first.tag == 888 && s.first.value == nil # XXX check all values?
        raise "*** unjoinable chunks #{c.inspect} #{s.inspect}" if s.size != 1
      end
      s.first
    end
  end
  def ast
    arr = [elements[0].ast] + elements[1].elements.map {|x| x.elements[3].ast}
    charr = arr.chunk(&:class).to_a
    if charr.size == 1
      unpack_chunk(*charr.first)
    else
      CBOR::Tagged.new(888, charr.map {|x| unpack_chunk(*x)})
    end
  end
}

number          = (hexfloat / hexint / octint / binint
                   / decnumber / nonfin) spec{
  def ast
    val = elements[0].ast

    if ei = spec.text_value[1..-1]
       # warn "*** implementing encoding indicator #{ei.inspect} for #{elements[0].text_value}"
       val = CBOR::Box.from_number(val, {ei: ei})
    end
    val
  end
}
sign            = "+" / "-"
decnumber       = [sign] (1*DIGIT ["." *DIGIT] / "." 1*DIGIT)
                         ["e" [sign] 1*DIGIT]{
  def ast
    tv = text_value
    if /[.e]/i =~ tv
      sp = elements[0].text_value
      mp = elements[1].text_value.sub(/\A\./, "0.").sub(/\.\z/, ".0")
      ep = elements[2].text_value
      (sp + mp + ep).to_f
    else
      tv.to_i
    end
  end
}
hexfloat        = [sign] "0x" (1*HEXDIG ["." *HEXDIG] / "." 1*HEXDIG)
                         "p" [sign] 1*DIGIT{
  def ast; Float(text_value.sub(/x\./i, "x0.").sub(/\.p/i, ".0p")) end}
hexint          = [sign] "0x" 1*HEXDIG{ def ast; Integer(text_value) end}
octint          = [sign] "0o" 1*ODIGIT{ def ast; Integer(text_value) end}
binint          = [sign] "0b" 1*BDIGIT{ def ast; Integer(text_value) end}
nonfin          = %s"Infinity"{ def ast; Float::INFINITY end }
                / %s"-Infinity"{ def ast; -Float::INFINITY end }
                / %s"NaN"{ def ast; Float::NAN end }
simple          = %s"false"{ def ast; false end }
                / %s"true"{ def ast; true end }
                / %s"null"{ def ast; nil end }
                / %s"undefined"{ def ast; CBOR::Simple.new(23) end }
                / %s"simple(" S item S ")"{
                  def ast; CBOR::Simple.new(item.ast) end
                }
uint            = "0" / DIGIT1 *DIGIT
tagged          = uint spec "(" S item S ")"{
  def ast
    if ei = spec.text_value[1..-1]
       warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after tag number #{uint.text_value}"
    end
    CBOR::Tagged.new(uint.text_value.to_i, item.ast)
  end
}

app-prefix      = lcalpha *lcldh ; including h and b64
                / ucalpha *ucldh ; tagged variant, if defined
app-string      = app-prefix sqstr{
  def ast                       # XXX ignoring h and b64
    data = sqstr.ast.force_encoding(Encoding::UTF_8) # XXX undo .b
    app = app_prefix.text_value
    ::EDNGRAMMAR::APPS[app].decode(app, data)
  end
}
app-sequence    = app-prefix "<<" seq ">>"{
  def ast
    args = seq.ast
    app = app_prefix.text_value
    # Find a better place to put a default initialization
    ::EDNGRAMMAR::APPS[app].decode(app, args)
  end
}
sqstr           = SQUOTE *single-quoted SQUOTE{
  def ast
    elements[1].elements.map {|x| x.ast}.join.b # XXX .b
  end
}
bstr            = (sq-app-string-h&{|x|$options.integrated}){ def ast; elements[0].ast end}
                / (sq-app-string-b64&{|x|$options.integrated}){ def ast; elements[0].ast end} /
                  app-string / sqstr / app-sequence / embedded
                  ; app-string/-sequence could be any type
tstr            = DQUOTE *double-quoted DQUOTE{
  def ast
    elements[1].elements.map {|x| x.ast}.join
  end
}
embedded        = "<<" seq ">>"{
  def ast
    sn = seq.ast
    if CBOR::Sequence === sn
      sn.to_cborseq
    else
      CBOR.encode(sn)
    end
  end
}

array           = "[" (specms S item *(MSC item) SOC / spec S) "]"{
  def ast
    e = elements[1] # alternative
    ei = nil
    if e.respond_to?(:specms)
      if e.specms && e.specms.elements
        ei = e.specms.elements[1].text_value
      end
      r = [e.item.ast] + e.elements[3].elements.map {|x| x.item.ast}
    else
      if e.spec && e.spec.elements
        ei = e.spec.elements[1].text_value
      end
      r = []
    end
    if ei == ""
      r.cbor_stream!
    elsif ei
      warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after ["
    end
    r
  end
}
map             = "{" (specms S keyp *(MSC keyp) SOC / spec S) "}"{
  def ast
    e = elements[1] # alternative
    ei = nil
    if e.respond_to?(:specms)
      if e.specms && e.specms.elements
        ei = e.specms.elements[1].text_value
      end
      r = Hash[ [e.keyp.ast] + e.elements[3].elements.map {|x| x.keyp.ast } ]
    else
      if e.spec && e.spec.elements
        ei = e.spec.elements[1].text_value
      end
      r = {}
    end
    if ei == ""
      r.cbor_stream!
    elsif ei
      warn "*** ignoring unimplemented encoding indicator #{ei.inspect} after ["
    end
    r
  end
}
keyp            = item S ":" S item{
  def ast
    [elements[0].ast, elements[4].ast]
  end
}

; We allow %x09 HT in prose, but not in strings
blank           = %x09 / %x0A / %x0D / %x20
non-slash       = blank / %x21-2e / %x30-7F / NONASCII
non-lf          = %x09 / %x0D / %x20-7F / NONASCII
comment         = "/" *non-slash "/"
                / "#" *non-lf %x0A
; optional space
S               = *blank *(comment *blank)
; mandatory space
MS              = (blank/comment) S
; mandatory comma and/or space
MSC             = ("," S) / (MS ["," S])
; optional comma and/or space
SOC             = S ["," S]

; check semantically that strings are either all text or all bytes
; note that there must be at least one string to distinguish
streamstring    = "(_" MS string *(MSC string) SOC ")"{
  def ast
    strings = [elements[2].ast] + elements[3].elements.map {|x| x.string.ast }
    unless Set[*strings.map(&:encoding)].size == 1
      warn "*** mixed streamstring #{strings.cbor_diagnostic}"
    end
    strings.join.cbor_stream!(strings.map(&:size))
  end
}
spec            = ["_" *wordchar]{def ast; elements[0].elements[1].text_value end}
specms          = ["_" *wordchar MS]{ def ast; elements[0].elements[1].text_value end}

double-quoted   = unescaped{def ast; text_value.gsub("\r", "") end}
                / SQUOTE{def ast; text_value end}
                / "\" escapable-d{def ast; escapable_d.ast end}

single-quoted   = unescaped{def ast; text_value.gsub("\r", "") end}
                / DQUOTE{def ast; text_value end}
                / "\" escapable-s{def ast; escapable_s.ast end}

escapable1      = %s"b"{def ast; "\b" end} ; BS backspace U+0008
                / %s"f"{def ast; "\f" end} ; FF form feed U+000C
                / %s"n"{def ast; "\n" end} ; LF line feed U+000A
                / %s"r"{def ast; "\r" end} ; CR carriage return U+000D
                / %s"t"{def ast; "\t" end} ; HT horizontal tab U+0009
                / "\"{def ast; text_value end}   ; \ backslash (reverse solidus) U+005C

escapable-d     = escapable1
                / DQUOTE{def ast; text_value end}
                / "/"{def ast; text_value end}   ; / slash (solidus) U+002F (JSON!)
                / (%s"u" hexchar){def ast; hexchar.ast end} ;  uXXXX      U+XXXX

escapable-s     = escapable1
                / SQUOTE{def ast; text_value end}
                / (%s"u" hexchar-s){def ast; hexchar_s.ast end} ;  uXXXX      U+XXXX

hexchar         = "{" (1*"0" [ hexscalar ] / hexscalar) "}"{def ast; elements[1].hex_value.chr(Encoding::UTF_8) end}
                / non-surrogate{def ast; hex_value.chr(Encoding::UTF_8) end}
                / two-surrogate
non-surrogate   = ((DIGIT / "A"/"B"/"C" / "E"/"F") 3HEXDIG)
                / ("D" ODIGIT 2HEXDIG )
two-surrogate   = high-surrogate "\" %s"u" low-surrogate{
  def ast
    ((high_surrogate.ast << 10) + low_surrogate.ast + 0x10000).chr(Encoding::UTF_8)
  end
}
high-surrogate  = "D" ("8"/"9"/"A"/"B") 2HEXDIG{def ast; hex_value - 0xD800 end}
low-surrogate   = "D" ("C"/"D"/"E"/"F") 2HEXDIG{def ast; hex_value - 0xDC00 end}
hexscalar       = "10" 4HEXDIG / HEXDIG1 4HEXDIG
                / non-surrogate / 1*3HEXDIG

; single-quote hexchar-s: don't allow 0020..007e
hexchar-s       = "{" (1*"0" [ hexscalar-s ] / hexscalar-s) "}"{def ast; elements[1].hex_value.chr(Encoding::UTF_8) end}
                / non-surrogate-s{def ast; hex_value.chr(Encoding::UTF_8) end}
                / two-surrogate
non-surrogate-s = "007F"                 ; rubout
                / "00" ("0"/"1"/"8"/"9"/HEXDIGA) HEXDIG
                / "0" HEXDIG1 2HEXDIG
                / non-surrogate-1
non-surrogate-1 = ((DIGIT1 / "A"/"B"/"C" / "E"/"F") 3HEXDIG)
                / ("D" ODIGIT 2HEXDIG )
hexscalar-s     = "10" 4HEXDIG / HEXDIG1 4HEXDIG
                / non-surrogate-1 / HEXDIG1 2HEXDIG
                / ("1"/"8"/"9"/HEXDIGA) HEXDIG
                / "7F"
                / HEXDIG1

; Note that no other C0 characters are allowed, including %x09 HT
unescaped       = %x0A ; new line
                / %x0D ; carriage return -- ignored on input
                / %x20-21
                     ; omit 0x22 "
                / %x23-26
                     ; omit 0x27 '
                / %x28-5B
                     ; omit 0x5C \
                / %x5D-7F
                / NONASCII

DQUOTE          = %x22    ; " double quote
SQUOTE          = "'"     ; ' single quote
DIGIT           = %x30-39 ; 0-9
DIGIT1          = %x31-39 ; 1-9
ODIGIT          = %x30-37 ; 0-7
BDIGIT          = %x30-31 ; 0-1
HEXDIGA         = "A" / "B" / "C" / "D" / "E" / "F"
; Note: double-quoted strings as in "A" are case-insensitive in ABNF
HEXDIG          = DIGIT / HEXDIGA
HEXDIG1         = DIGIT1 / HEXDIGA
lcalpha         = %x61-7A ; a-z
lcldh           = lcalpha / DIGIT / "-"
ucalpha         = %x41-5A ; A-Z
ucldh           = ucalpha / DIGIT / "-"
ALPHA           = lcalpha / ucalpha
wordchar        = "_" / ALPHA / DIGIT ; [_a-z0-9A-Z]
NONASCII        = %x80-D7FF / %xE000-10FFFF

;; bricklets for building integrating parsers

i-HT =        %s"\t" / %s"\u" ("0009" / "{" *("0") "9}")
i-LF = %x0a / %s"\n" / %s"\u" ("000A" / "{" *("0") "A}")
i-CR = %x0d / %s"\r" / %s"\u" ("000D" / "{" *("0") "D}")

i-blank = i-LF / i-CR / " "
i-non-lf = i-HT / i-CR / %x20-26 / "\'" / %x28-5b
         / "\\" / %x5d-7f / i-NONASCII

i-NONASCII = NONASCII / %s"\u" ESCGE7F

; hex escaping for U+007F or greater
ESCGE7F = "D" ("8"/"9"/"A"/"B") 2HEXDIG
          %s"\u" "D" ("C"/"D"/"E"/"F") 2HEXDIG
        / FOURHEX1 / "0" HEXDIG1 2HEXDIG / "00" TWOHEX1
        / "{" *("0")
          ("10" 4HEXDIG / HEXDIG1 4HEXDIG
           / FOURHEX1 / HEXDIG1 2HEXDIG / TWOHEX1)
          "}"

; xxxx - 0xxx - Dhigh\uDloow
FOURHEX1 = (DIGIT1 / "A"/"B"/"C" / "E"/"F") 3HEXDIG
         / "D" ODIGIT 2HEXDIG
; 00xx - ASCII + 007F
TWOHEX1  = ("8"/"9" / HEXDIGA) HEXDIG / "7F"

;; integrated parser for h''

sq-app-string-h = %s"h'" app-string-h "'"{def ast; app_string_h.ast end}
app-string-h = h-S *(HEXDIG h-S HEXDIG h-S{
  def ast
    Integer(elements[0].text_value + elements[2].text_value, 16).chr("BINARY")
  end
} / ellipsis h-S{def ast; ellipsis.ast end})
    ["#" *(i-non-lf)]{
  def unpack_thread(s)
    case s[0]
    when CBOR::Tagged
      s[0]
    when String
      s.join
    else
      raise "@@@ unpack_thread #{s.inspect}"
    end
  end
  def ast
    e1 = elements[1].elements.map {|e| e.ast}
    out = []
    curr = []
    e1.each { |el|
      if curr.size == 0 || curr[0].class == el.class
        curr << el
      else
        out << curr
        curr = [el]
      end
    }
    if out.size == 0 && (curr.size == 0 || String === curr[0])
      curr.join.b # unpack_thread(curr)
    else
      CBOR::Tagged.new(888, (out << curr).map {|x| unpack_thread(x)})
    end
  end
}

h-S = *(i-blank) *(h-comment *(i-blank))
h-non-slash = i-blank / %x21-26 / "\'" / %x28-2e
            / %x30-5b / "\\" / %x5d-7f / i-NONASCII
h-comment = "/" *(h-non-slash) "/"
          / "#" *(i-non-lf) i-LF

;; integrated parser for b64''

sq-app-string-b64 = %s"b64'" app-string-b64 "'"{def ast; app_string_b64.ast end}
app-string-b64  = b64-S *(4(b64dig b64-S))
                  [b64dig b64-S b64dig b64-S
                   ["=" b64-S "=" / b64dig b64-S ["="]] b64-S]
                  ["#" *i-non-lf]{
                   def ast
                     t = text_value.gsub(/\s|#[^\n]*(?:\n|\z)/, '').chars.each_slice(4).map(&:join)
                     if last = t[-1]
                       last << "=" * (4 - last.size)
                     end
                     b = t.join.tr("-_", "+/")
                     begin
                       b.unpack("m0")[0]
                     rescue ArgumentError
                       raise ArgumentError, "cbor-diagnostic: invalid base64 #{b.inspect}", caller[1..-1]
                     end
                   end
}
b64dig          = ALPHA / DIGIT / "-" / "_" / "+" / "/"
b64-S           = *i-blank *(b64-comment *i-blank)
b64-comment     = "#" *i-non-lf %x0A
