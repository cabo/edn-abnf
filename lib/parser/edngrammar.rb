# Encoding: UTF-8
# Autogenerated from a Treetop grammar. Edits may be lost.


module EDNGRAMMAR
  include Treetop::Runtime

  def root
    @root ||= :seq
  end

  module Seq0
    def S1
      elements[1]
    end

    def item
      elements[2]
    end

    def S2
      elements[3]
    end
  end

  module Seq1
    def item
      elements[0]
    end

    def S
      elements[1]
    end

    def OC
      elements[3]
    end
  end

  module Seq2
    def S1
      elements[0]
    end

    def S2
      elements[2]
    end
  end

  module Seq3
    def ast
      r = if e = elements[1].elements
            [e[0].ast] + e[2].elements.map {|x| x.item.ast }
          else
            []
          end
      if r.size == 1
        r.first
      else
        CBOR::Sequence.new(r)
      end
    end
  end

  def _nt_seq
    start_index = index
    if node_cache[:seq].has_key?(index)
      cached = node_cache[:seq][index]
      if cached
        node_cache[:seq][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_S
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_item
      s3 << r4
      if r4
        r5 = _nt_S
        s3 << r5
        if r5
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            if (match_len = has_terminal?(",", false, index))
              r8 = true
              @index += match_len
            else
              terminal_parse_failure('","')
              r8 = nil
            end
            s7 << r8
            if r8
              r9 = _nt_S
              s7 << r9
              if r9
                r10 = _nt_item
                s7 << r10
                if r10
                  r11 = _nt_S
                  s7 << r11
                end
              end
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Seq0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s3 << r6
          if r6
            r12 = _nt_OC
            s3 << r12
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Seq1)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r13 = _nt_S
        s0 << r13
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Seq2)
      r0.extend(Seq3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:seq][start_index] = r0

    r0
  end

  def _nt_item
    start_index = index
    if node_cache[:item].has_key?(index)
      cached = node_cache[:item][index]
      if cached
        node_cache[:item][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_map
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_array
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_tagged
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_basenumber
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_decnumber
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              r6 = _nt_infin
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                r7 = _nt_simple
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  r8 = _nt_tstr
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    r9 = _nt_bstr
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r0 = r9
                    else
                      r10 = _nt_embedded
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r0 = r10
                      else
                        r11 = _nt_streamstring
                        if r11
                          r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                          r0 = r11
                        else
                          @index = i0
                          r0 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:item][start_index] = r0

    r0
  end

  def _nt_sign
    start_index = index
    if node_cache[:sign].has_key?(index)
      cached = node_cache[:sign][index]
      if cached
        node_cache[:sign][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("+", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"+"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("-", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"-"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:sign][start_index] = r0

    r0
  end

  module Decnumber0
  end

  module Decnumber1
  end

  module Decnumber2
  end

  module Decnumber3
    def ast
      ip = elements[0].text_value + elements[1].text_value
      dp = elements[2].text_value
      ep = elements[3].text_value
      if dp.empty? && ep.empty?
        ip.to_i
      else
        (ip + dp + ep).to_f
      end
    end
  end

  def _nt_decnumber
    start_index = index
    if node_cache[:decnumber].has_key?(index)
      cached = node_cache[:decnumber][index]
      if cached
        node_cache[:decnumber][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_sign
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_DIGIT
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        i6, s6 = index, []
        if (match_len = has_terminal?(".", false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('"."')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            r9 = _nt_DIGIT
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Decnumber0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          i11, s11 = index, []
          if (match_len = has_terminal?("e", :insens, index))
            r12 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"e"')
            r12 = nil
          end
          s11 << r12
          if r12
            r14 = _nt_sign
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
            if r13
              s15, i15 = [], index
              loop do
                r16 = _nt_DIGIT
                if r16
                  s15 << r16
                else
                  break
                end
              end
              if s15.empty?
                @index = i15
                r15 = nil
              else
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              end
              s11 << r15
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(Decnumber1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Decnumber2)
      r0.extend(Decnumber3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:decnumber][start_index] = r0

    r0
  end

  module Basenumber0
  end

  module Basenumber1
  end

  module Basenumber2
  end

  module Basenumber3
  end

  module Basenumber4
    def ast; Integer(text_value) end
  end

  def _nt_basenumber
    start_index = index
    if node_cache[:basenumber].has_key?(index)
      cached = node_cache[:basenumber][index]
      if cached
        node_cache[:basenumber][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_sign
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("0", false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('"0"')
        r3 = nil
      end
      s0 << r3
      if r3
        i4 = index
        i5, s5 = index, []
        if (match_len = has_terminal?("x", :insens, index))
          r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"x"')
          r6 = nil
        end
        s5 << r6
        if r6
          s7, i7 = [], index
          loop do
            r8 = _nt_HEXDIG
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Basenumber0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r4 = r5
        else
          i9, s9 = index, []
          if (match_len = has_terminal?("o", :insens, index))
            r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"o"')
            r10 = nil
          end
          s9 << r10
          if r10
            s11, i11 = [], index
            loop do
              r12 = _nt_ODIGIT
              if r12
                s11 << r12
              else
                break
              end
            end
            if s11.empty?
              @index = i11
              r11 = nil
            else
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            end
            s9 << r11
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(Basenumber1)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r4 = r9
          else
            i13, s13 = index, []
            if (match_len = has_terminal?("b", :insens, index))
              r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"b"')
              r14 = nil
            end
            s13 << r14
            if r14
              s15, i15 = [], index
              loop do
                r16 = _nt_BDIGIT
                if r16
                  s15 << r16
                else
                  break
                end
              end
              if s15.empty?
                @index = i15
                r15 = nil
              else
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              end
              s13 << r15
            end
            if s13.last
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
              r13.extend(Basenumber2)
            else
              @index = i13
              r13 = nil
            end
            if r13
              r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
              r4 = r13
            else
              @index = i4
              r4 = nil
            end
          end
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Basenumber3)
      r0.extend(Basenumber4)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:basenumber][start_index] = r0

    r0
  end

  module Infin0
    def ast; Float::INFINITY end
  end

  module Infin1
    def ast; -Float::INFINITY end
  end

  module Infin2
    def ast; Float::NAN end
  end

  def _nt_infin
    start_index = index
    if node_cache[:infin].has_key?(index)
      cached = node_cache[:infin][index]
      if cached
        node_cache[:infin][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("Infinity", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(Infin0)
      @index += match_len
    else
      terminal_parse_failure('"Infinity"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("-Infinity", false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(Infin1)
        @index += match_len
      else
        terminal_parse_failure('"-Infinity"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("NaN", false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          r3.extend(Infin2)
          @index += match_len
        else
          terminal_parse_failure('"NaN"')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:infin][start_index] = r0

    r0
  end

  module Simple0
    def ast; false end
  end

  module Simple1
    def ast; true end
  end

  module Simple2
    def ast; nil end
  end

  module Simple3
    def ast; CBOR::Simple.new(23) end
  end

  module Simple4
    def S1
      elements[1]
    end

    def item
      elements[2]
    end

    def S2
      elements[3]
    end

  end

  module Simple5
    def ast; CBOR::Simple.new(item.ast) end
  end

  def _nt_simple
    start_index = index
    if node_cache[:simple].has_key?(index)
      cached = node_cache[:simple][index]
      if cached
        node_cache[:simple][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("false", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(Simple0)
      @index += match_len
    else
      terminal_parse_failure('"false"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("true", false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(Simple1)
        @index += match_len
      else
        terminal_parse_failure('"true"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("null", false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          r3.extend(Simple2)
          @index += match_len
        else
          terminal_parse_failure('"null"')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?("undefined", false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            r4.extend(Simple3)
            @index += match_len
          else
            terminal_parse_failure('"undefined"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            i5, s5 = index, []
            if (match_len = has_terminal?("simple(", false, index))
              r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"simple("')
              r6 = nil
            end
            s5 << r6
            if r6
              r7 = _nt_S
              s5 << r7
              if r7
                r8 = _nt_item
                s5 << r8
                if r8
                  r9 = _nt_S
                  s5 << r9
                  if r9
                    if (match_len = has_terminal?(")", false, index))
                      r10 = true
                      @index += match_len
                    else
                      terminal_parse_failure('")"')
                      r10 = nil
                    end
                    s5 << r10
                  end
                end
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Simple4)
              r5.extend(Simple5)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:simple][start_index] = r0

    r0
  end

  module Uint0
    def DIGIT1
      elements[0]
    end

  end

  def _nt_uint
    start_index = index
    if node_cache[:uint].has_key?(index)
      cached = node_cache[:uint][index]
      if cached
        node_cache[:uint][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("0", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"0"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_DIGIT1
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_DIGIT
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Uint0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:uint][start_index] = r0

    r0
  end

  module Tagged0
    def uint
      elements[0]
    end

    def S1
      elements[2]
    end

    def item
      elements[3]
    end

    def S2
      elements[4]
    end

  end

  module Tagged1
    def ast
      CBOR::Tagged.new(uint.text_value.to_i, item.ast)
    end
  end

  def _nt_tagged
    start_index = index
    if node_cache[:tagged].has_key?(index)
      cached = node_cache[:tagged][index]
      if cached
        node_cache[:tagged][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_uint
    s0 << r1
    if r1
      if (match_len = has_terminal?("(", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"("')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
        if r3
          r4 = _nt_item
          s0 << r4
          if r4
            r5 = _nt_S
            s0 << r5
            if r5
              if (match_len = has_terminal?(")", false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('")"')
                r6 = nil
              end
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Tagged0)
      r0.extend(Tagged1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tagged][start_index] = r0

    r0
  end

  module AppPrefix0
    def lcalpha
      elements[0]
    end

  end

  def _nt_app_prefix
    start_index = index
    if node_cache[:app_prefix].has_key?(index)
      cached = node_cache[:app_prefix][index]
      if cached
        node_cache[:app_prefix][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_lcalpha
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_lcalnum
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AppPrefix0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:app_prefix][start_index] = r0

    r0
  end

  module AppString0
    def app_prefix
      elements[0]
    end

    def sqstr
      elements[1]
    end
  end

  module AppString1
    def ast                       # XXX ignoring h and b64
      data = sqstr.ast.force_encoding(Encoding::UTF_8) # XXX
      app = app_prefix.text_value
      # Find a better place to put a default initialization
      EDNGRAMMAR.const_set(:APPS, Hash.new { |h, k|
                             h[k] = begin ::CBOR_DIAG.const_get("App_#{app}")
                                    rescue NameError
                                      raise ArgumentError.new("cbor-diagnostic: Unknown application-oriented extension #{k}")
                                    end
                           }) unless ::EDNGRAMMAR.const_defined?(:APPS)
      ::EDNGRAMMAR::APPS[app].decode(app, data)
    end
  end

  def _nt_app_string
    start_index = index
    if node_cache[:app_string].has_key?(index)
      cached = node_cache[:app_string][index]
      if cached
        node_cache[:app_string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_app_prefix
    s0 << r1
    if r1
      r2 = _nt_sqstr
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AppString0)
      r0.extend(AppString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:app_string][start_index] = r0

    r0
  end

  module Sqstr0
  end

  module Sqstr1
    def ast
      elements[1].elements.map {|x| x.ast}.join.b # XXX .b
    end
  end

  def _nt_sqstr
    start_index = index
    if node_cache[:sqstr].has_key?(index)
      cached = node_cache[:sqstr][index]
      if cached
        node_cache[:sqstr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("'", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"\'"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_single_quoted
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?("'", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"\'"')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Sqstr0)
      r0.extend(Sqstr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sqstr][start_index] = r0

    r0
  end

  def _nt_bstr
    start_index = index
    if node_cache[:bstr].has_key?(index)
      cached = node_cache[:bstr][index]
      if cached
        node_cache[:bstr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_app_string
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_sqstr
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bstr][start_index] = r0

    r0
  end

  module Tstr0
    def DQUOTE1
      elements[0]
    end

    def DQUOTE2
      elements[2]
    end
  end

  module Tstr1
    def ast
      elements[1].elements.map {|x| x.ast}.join
    end
  end

  def _nt_tstr
    start_index = index
    if node_cache[:tstr].has_key?(index)
      cached = node_cache[:tstr][index]
      if cached
        node_cache[:tstr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_DQUOTE
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_double_quoted
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_DQUOTE
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Tstr0)
      r0.extend(Tstr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tstr][start_index] = r0

    r0
  end

  module Embedded0
    def seq
      elements[1]
    end

  end

  module Embedded1
    def ast
      sn = seq.ast
      if CBOR::Sequence === sn
        sn.to_cborseq
      else
        CBOR.encode(sn)
      end
    end
  end

  def _nt_embedded
    start_index = index
    if node_cache[:embedded].has_key?(index)
      cached = node_cache[:embedded][index]
      if cached
        node_cache[:embedded][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("<<", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"<<"')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_seq
      s0 << r2
      if r2
        if (match_len = has_terminal?(">>", false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('">>"')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Embedded0)
      r0.extend(Embedded1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:embedded][start_index] = r0

    r0
  end

  module Array0
    def S1
      elements[1]
    end

    def item
      elements[2]
    end

    def S2
      elements[3]
    end
  end

  module Array1
    def item
      elements[0]
    end

    def S
      elements[1]
    end

    def OC
      elements[3]
    end
  end

  module Array2
    def spec
      elements[1]
    end

  end

  module Array3
    def ast
      r = if e = elements[2].elements
            [e[0].ast] + e[2].elements.map {|x| x.item.ast }
          else
            []
          end
      if spec.ast
        r.cbor_stream!
      end
      r
    end
  end

  def _nt_array
    start_index = index
    if node_cache[:array].has_key?(index)
      cached = node_cache[:array][index]
      if cached
        node_cache[:array][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("[", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"["')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_spec
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_item
        s4 << r5
        if r5
          r6 = _nt_S
          s4 << r6
          if r6
            s7, i7 = [], index
            loop do
              i8, s8 = index, []
              if (match_len = has_terminal?(",", false, index))
                r9 = true
                @index += match_len
              else
                terminal_parse_failure('","')
                r9 = nil
              end
              s8 << r9
              if r9
                r10 = _nt_S
                s8 << r10
                if r10
                  r11 = _nt_item
                  s8 << r11
                  if r11
                    r12 = _nt_S
                    s8 << r12
                  end
                end
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(Array0)
              else
                @index = i8
                r8 = nil
              end
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s4 << r7
            if r7
              r13 = _nt_OC
              s4 << r13
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Array1)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          if (match_len = has_terminal?("]", false, index))
            r14 = true
            @index += match_len
          else
            terminal_parse_failure('"]"')
            r14 = nil
          end
          s0 << r14
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Array2)
      r0.extend(Array3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array][start_index] = r0

    r0
  end

  module Map0
    def S1
      elements[1]
    end

    def kp
      elements[2]
    end

    def S2
      elements[3]
    end
  end

  module Map1
    def kp
      elements[0]
    end

    def S
      elements[1]
    end

    def OC
      elements[3]
    end
  end

  module Map2
    def spec
      elements[1]
    end

  end

  module Map3
    def ast
      r = if e = elements[2].elements
            Hash[ [e[0].ast] + e[2].elements.map {|x| x.kp.ast } ]
          else
            {}
          end
      if spec.ast
        r.cbor_stream!
      end
      r
    end
  end

  def _nt_map
    start_index = index
    if node_cache[:map].has_key?(index)
      cached = node_cache[:map][index]
      if cached
        node_cache[:map][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("{", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"{"')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_spec
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_kp
        s4 << r5
        if r5
          r6 = _nt_S
          s4 << r6
          if r6
            s7, i7 = [], index
            loop do
              i8, s8 = index, []
              if (match_len = has_terminal?(",", false, index))
                r9 = true
                @index += match_len
              else
                terminal_parse_failure('","')
                r9 = nil
              end
              s8 << r9
              if r9
                r10 = _nt_S
                s8 << r10
                if r10
                  r11 = _nt_kp
                  s8 << r11
                  if r11
                    r12 = _nt_S
                    s8 << r12
                  end
                end
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(Map0)
              else
                @index = i8
                r8 = nil
              end
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s4 << r7
            if r7
              r13 = _nt_OC
              s4 << r13
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Map1)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          if (match_len = has_terminal?("}", false, index))
            r14 = true
            @index += match_len
          else
            terminal_parse_failure('"}"')
            r14 = nil
          end
          s0 << r14
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Map2)
      r0.extend(Map3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:map][start_index] = r0

    r0
  end

  module Kp0
    def item1
      elements[0]
    end

    def S1
      elements[1]
    end

    def S2
      elements[3]
    end

    def item2
      elements[4]
    end
  end

  module Kp1
    def ast
      [elements[0].ast, elements[4].ast]
    end
  end

  def _nt_kp
    start_index = index
    if node_cache[:kp].has_key?(index)
      cached = node_cache[:kp][index]
      if cached
        node_cache[:kp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_item
    s0 << r1
    if r1
      r2 = _nt_S
      s0 << r2
      if r2
        if (match_len = has_terminal?(":", false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('":"')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_S
          s0 << r4
          if r4
            r5 = _nt_item
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Kp0)
      r0.extend(Kp1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:kp][start_index] = r0

    r0
  end

  def _nt_blank
    start_index = index
    if node_cache[:blank].has_key?(index)
      cached = node_cache[:blank][index]
      if cached
        node_cache[:blank][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("\t", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"\\t"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("\n", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"\\n"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("\r", false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('"\\r"')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?(" ", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('" "')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:blank][start_index] = r0

    r0
  end

  def _nt_non_slash
    start_index = index
    if node_cache[:non_slash].has_key?(index)
      cached = node_cache[:non_slash][index]
      if cached
        node_cache[:non_slash][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_blank
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if has_terminal?(@regexps[gr = '\A[!-\\.]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[!-\\.]')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if has_terminal?(@regexps[gr = '\A[0-􏿿]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[0-􏿿]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:non_slash][start_index] = r0

    r0
  end

  module S0
  end

  module S1
  end

  def _nt_S
    start_index = index
    if node_cache[:S].has_key?(index)
      cached = node_cache[:S][index]
      if cached
        node_cache[:S][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_blank
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if (match_len = has_terminal?("/", false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('"/"')
          r5 = nil
        end
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_non_slash
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s4 << r6
          if r6
            if (match_len = has_terminal?("/", false, index))
              r8 = true
              @index += match_len
            else
              terminal_parse_failure('"/"')
              r8 = nil
            end
            s4 << r8
            if r8
              s9, i9 = [], index
              loop do
                r10 = _nt_blank
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s4 << r9
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(S0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(S1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:S][start_index] = r0

    r0
  end

  module OC0
    def S
      elements[1]
    end
  end

  def _nt_OC
    start_index = index
    if node_cache[:OC].has_key?(index)
      cached = node_cache[:OC][index]
      if cached
        node_cache[:OC][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i1, s1 = index, []
    if (match_len = has_terminal?(",", false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('","')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_S
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(OC0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:OC][start_index] = r0

    r0
  end

  module Streamstring0
    def S1
      elements[1]
    end

    def tstr
      elements[2]
    end

    def S2
      elements[3]
    end
  end

  module Streamstring1
    def spec1
      elements[1]
    end

    def tstr
      elements[2]
    end

    def S
      elements[3]
    end

    def OC
      elements[5]
    end

  end

  module Streamstring2
    def S1
      elements[1]
    end

    def sqstr
      elements[2]
    end

    def S2
      elements[3]
    end
  end

  module Streamstring3
    def spec1
      elements[1]
    end

    def sqstr
      elements[2]
    end

    def S
      elements[3]
    end

    def OC
      elements[5]
    end

  end

  def _nt_streamstring
    start_index = index
    if node_cache[:streamstring].has_key?(index)
      cached = node_cache[:streamstring][index]
      if cached
        node_cache[:streamstring][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?("(", false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('"("')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_spec1
      s1 << r3
      if r3
        r4 = _nt_tstr
        s1 << r4
        if r4
          r5 = _nt_S
          s1 << r5
          if r5
            s6, i6 = [], index
            loop do
              i7, s7 = index, []
              if (match_len = has_terminal?(",", false, index))
                r8 = true
                @index += match_len
              else
                terminal_parse_failure('","')
                r8 = nil
              end
              s7 << r8
              if r8
                r9 = _nt_S
                s7 << r9
                if r9
                  r10 = _nt_tstr
                  s7 << r10
                  if r10
                    r11 = _nt_S
                    s7 << r11
                  end
                end
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Streamstring0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s1 << r6
            if r6
              r12 = _nt_OC
              s1 << r12
              if r12
                if (match_len = has_terminal?(")", false, index))
                  r13 = true
                  @index += match_len
                else
                  terminal_parse_failure('")"')
                  r13 = nil
                end
                s1 << r13
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Streamstring1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i14, s14 = index, []
      if (match_len = has_terminal?("(", false, index))
        r15 = true
        @index += match_len
      else
        terminal_parse_failure('"("')
        r15 = nil
      end
      s14 << r15
      if r15
        r16 = _nt_spec1
        s14 << r16
        if r16
          r17 = _nt_sqstr
          s14 << r17
          if r17
            r18 = _nt_S
            s14 << r18
            if r18
              s19, i19 = [], index
              loop do
                i20, s20 = index, []
                if (match_len = has_terminal?(",", false, index))
                  r21 = true
                  @index += match_len
                else
                  terminal_parse_failure('","')
                  r21 = nil
                end
                s20 << r21
                if r21
                  r22 = _nt_S
                  s20 << r22
                  if r22
                    r23 = _nt_sqstr
                    s20 << r23
                    if r23
                      r24 = _nt_S
                      s20 << r24
                    end
                  end
                end
                if s20.last
                  r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                  r20.extend(Streamstring2)
                else
                  @index = i20
                  r20 = nil
                end
                if r20
                  s19 << r20
                else
                  break
                end
              end
              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
              s14 << r19
              if r19
                r25 = _nt_OC
                s14 << r25
                if r25
                  if (match_len = has_terminal?(")", false, index))
                    r26 = true
                    @index += match_len
                  else
                    terminal_parse_failure('")"')
                    r26 = nil
                  end
                  s14 << r26
                end
              end
            end
          end
        end
      end
      if s14.last
        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        r14.extend(Streamstring3)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:streamstring][start_index] = r0

    r0
  end

  module Spec0
    def S
      elements[1]
    end
  end

  module Spec1
    def S
      elements[0]
    end

  end

  module Spec2
    def ast; (e1 = elements[1].elements) && !e1[0].empty? end
  end

  def _nt_spec
    start_index = index
    if node_cache[:spec].has_key?(index)
      cached = node_cache[:spec][index]
      if cached
        node_cache[:spec][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_S
    s0 << r1
    if r1
      i3, s3 = index, []
      if (match_len = has_terminal?("_", false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('"_"')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_S
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Spec0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Spec1)
      r0.extend(Spec2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:spec][start_index] = r0

    r0
  end

  module Spec10
    def S1
      elements[0]
    end

    def S2
      elements[2]
    end
  end

  def _nt_spec1
    start_index = index
    if node_cache[:spec1].has_key?(index)
      cached = node_cache[:spec1][index]
      if cached
        node_cache[:spec1][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_S
    s0 << r1
    if r1
      if (match_len = has_terminal?("_", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"_"')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Spec10)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:spec1][start_index] = r0

    r0
  end

  module DoubleQuoted0
    def ast; text_value end
  end

  module DoubleQuoted1
    def ast; text_value end
  end

  module DoubleQuoted2
    def DQUOTE
      elements[1]
    end
  end

  module DoubleQuoted3
    def ast; elements[1].text_value end
  end

  module DoubleQuoted4
    def escapable
      elements[1]
    end
  end

  module DoubleQuoted5
    def ast; escapable.ast end
  end

  def _nt_double_quoted
    start_index = index
    if node_cache[:double_quoted].has_key?(index)
      cached = node_cache[:double_quoted][index]
      if cached
        node_cache[:double_quoted][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_unescaped
    r1.extend(DoubleQuoted0)
    r1.extend(DoubleQuoted0)
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("'", false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(DoubleQuoted1)
        @index += match_len
      else
        terminal_parse_failure('"\'"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        i3, s3 = index, []
        if (match_len = has_terminal?("\\", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"\\\\"')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_DQUOTE
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DoubleQuoted2)
          r3.extend(DoubleQuoted3)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          i6, s6 = index, []
          if (match_len = has_terminal?("\\", false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('"\\\\"')
            r7 = nil
          end
          s6 << r7
          if r7
            r8 = _nt_escapable
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(DoubleQuoted4)
            r6.extend(DoubleQuoted5)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r0 = r6
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:double_quoted][start_index] = r0

    r0
  end

  module SingleQuoted0
    def ast; text_value end
  end

  module SingleQuoted1
    def ast; text_value end
  end

  module SingleQuoted2
  end

  module SingleQuoted3
    def ast; elements[1].text_value end
  end

  module SingleQuoted4
    def escapable
      elements[1]
    end
  end

  module SingleQuoted5
    def ast; escapable.ast end
  end

  def _nt_single_quoted
    start_index = index
    if node_cache[:single_quoted].has_key?(index)
      cached = node_cache[:single_quoted][index]
      if cached
        node_cache[:single_quoted][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_unescaped
    r1.extend(SingleQuoted0)
    r1.extend(SingleQuoted0)
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_DQUOTE
      r2.extend(SingleQuoted1)
      r2.extend(SingleQuoted1)
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        i3, s3 = index, []
        if (match_len = has_terminal?("\\", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"\\\\"')
          r4 = nil
        end
        s3 << r4
        if r4
          if (match_len = has_terminal?("'", false, index))
            r5 = true
            @index += match_len
          else
            terminal_parse_failure('"\'"')
            r5 = nil
          end
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SingleQuoted2)
          r3.extend(SingleQuoted3)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          i6, s6 = index, []
          if (match_len = has_terminal?("\\", false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('"\\\\"')
            r7 = nil
          end
          s6 << r7
          if r7
            r8 = _nt_escapable
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(SingleQuoted4)
            r6.extend(SingleQuoted5)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r0 = r6
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:single_quoted][start_index] = r0

    r0
  end

  module Escapable0
    def ast; "\b" end
  end

  module Escapable1
    def ast; "\f" end
  end

  module Escapable2
    def ast; "\n" end
  end

  module Escapable3
    def ast; "\r" end
  end

  module Escapable4
    def ast; "\t" end
  end

  module Escapable5
    def ast; text_value end
  end

  module Escapable6
    def ast; text_value end
  end

  module Escapable7
    def hexchar
      elements[1]
    end
  end

  module Escapable8
    def ast; hexchar.ast end
  end

  def _nt_escapable
    start_index = index
    if node_cache[:escapable].has_key?(index)
      cached = node_cache[:escapable][index]
      if cached
        node_cache[:escapable][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("b", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r1.extend(Escapable0)
      @index += match_len
    else
      terminal_parse_failure('"b"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("f", false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r2.extend(Escapable1)
        @index += match_len
      else
        terminal_parse_failure('"f"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("n", false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          r3.extend(Escapable2)
          @index += match_len
        else
          terminal_parse_failure('"n"')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?("r", false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            r4.extend(Escapable3)
            @index += match_len
          else
            terminal_parse_failure('"r"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if (match_len = has_terminal?("t", false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              r5.extend(Escapable4)
              @index += match_len
            else
              terminal_parse_failure('"t"')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if (match_len = has_terminal?("/", false, index))
                r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                r6.extend(Escapable5)
                @index += match_len
              else
                terminal_parse_failure('"/"')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                if (match_len = has_terminal?("\\", false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  r7.extend(Escapable6)
                  @index += match_len
                else
                  terminal_parse_failure('"\\\\"')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  i8, s8 = index, []
                  if (match_len = has_terminal?("u", false, index))
                    r9 = true
                    @index += match_len
                  else
                    terminal_parse_failure('"u"')
                    r9 = nil
                  end
                  s8 << r9
                  if r9
                    r10 = _nt_hexchar
                    s8 << r10
                  end
                  if s8.last
                    r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                    r8.extend(Escapable7)
                    r8.extend(Escapable8)
                  else
                    @index = i8
                    r8 = nil
                  end
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:escapable][start_index] = r0

    r0
  end

  module Hexchar0
    def ast; hex_value.chr(Encoding::UTF_8) end
  end

  module Hexchar1
    def high_surrogate
      elements[0]
    end

    def low_surrogate
      elements[3]
    end
  end

  module Hexchar2
    def ast
      ((high_surrogate.ast << 10) + low_surrogate.ast + 0x10000).chr(Encoding::UTF_8)
    end
  end

  def _nt_hexchar
    start_index = index
    if node_cache[:hexchar].has_key?(index)
      cached = node_cache[:hexchar][index]
      if cached
        node_cache[:hexchar][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_non_surrogate
    r1.extend(Hexchar0)
    r1.extend(Hexchar0)
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_high_surrogate
      s2 << r3
      if r3
        if (match_len = has_terminal?("\\", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"\\\\"')
          r4 = nil
        end
        s2 << r4
        if r4
          if (match_len = has_terminal?("u", false, index))
            r5 = true
            @index += match_len
          else
            terminal_parse_failure('"u"')
            r5 = nil
          end
          s2 << r5
          if r5
            r6 = _nt_low_surrogate
            s2 << r6
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Hexchar1)
        r2.extend(Hexchar2)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:hexchar][start_index] = r0

    r0
  end

  module NonSurrogate0
  end

  module NonSurrogate1
    def ODIGIT
      elements[1]
    end

  end

  def _nt_non_surrogate
    start_index = index
    if node_cache[:non_surrogate].has_key?(index)
      cached = node_cache[:non_surrogate][index]
      if cached
        node_cache[:non_surrogate][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i2 = index
    r3 = _nt_DIGIT
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?("a", :insens, index))
        r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"A"')
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        if (match_len = has_terminal?("b", :insens, index))
          r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"B"')
          r5 = nil
        end
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r2 = r5
        else
          if (match_len = has_terminal?("c", :insens, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"C"')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r2 = r6
          else
            if (match_len = has_terminal?("e", :insens, index))
              r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"E"')
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r2 = r7
            else
              if (match_len = has_terminal?("f", :insens, index))
                r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"F"')
                r8 = nil
              end
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r2 = r8
              else
                @index = i2
                r2 = nil
              end
            end
          end
        end
      end
    end
    s1 << r2
    if r2
      s9, i9 = [], index
      loop do
        r10 = _nt_HEXDIG
        if r10
          s9 << r10
        else
          break
        end
        if s9.size == 3
          break
        end
      end
      if s9.size < 3
        @index = i9
        r9 = nil
      else
        if s9.size < 3
          @terminal_failures.pop
        end
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
      end
      s1 << r9
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(NonSurrogate0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i11, s11 = index, []
      if (match_len = has_terminal?("d", :insens, index))
        r12 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"D"')
        r12 = nil
      end
      s11 << r12
      if r12
        r13 = _nt_ODIGIT
        s11 << r13
        if r13
          s14, i14 = [], index
          loop do
            r15 = _nt_HEXDIG
            if r15
              s14 << r15
            else
              break
            end
            if s14.size == 2
              break
            end
          end
          if s14.size < 2
            @index = i14
            r14 = nil
          else
            if s14.size < 2
              @terminal_failures.pop
            end
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          end
          s11 << r14
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(NonSurrogate1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:non_surrogate][start_index] = r0

    r0
  end

  module HighSurrogate0
  end

  module HighSurrogate1
    def ast; hex_value - 0xD800 end
  end

  def _nt_high_surrogate
    start_index = index
    if node_cache[:high_surrogate].has_key?(index)
      cached = node_cache[:high_surrogate][index]
      if cached
        node_cache[:high_surrogate][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("d", :insens, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"D"')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("8", false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('"8"')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("9", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"9"')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          if (match_len = has_terminal?("a", :insens, index))
            r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"A"')
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r2 = r5
          else
            if (match_len = has_terminal?("b", :insens, index))
              r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"B"')
              r6 = nil
            end
            if r6
              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
              r2 = r6
            else
              @index = i2
              r2 = nil
            end
          end
        end
      end
      s0 << r2
      if r2
        s7, i7 = [], index
        loop do
          r8 = _nt_HEXDIG
          if r8
            s7 << r8
          else
            break
          end
          if s7.size == 2
            break
          end
        end
        if s7.size < 2
          @index = i7
          r7 = nil
        else
          if s7.size < 2
            @terminal_failures.pop
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(HighSurrogate0)
      r0.extend(HighSurrogate1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:high_surrogate][start_index] = r0

    r0
  end

  module LowSurrogate0
  end

  module LowSurrogate1
    def ast; hex_value - 0xDC00 end
  end

  def _nt_low_surrogate
    start_index = index
    if node_cache[:low_surrogate].has_key?(index)
      cached = node_cache[:low_surrogate][index]
      if cached
        node_cache[:low_surrogate][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("d", :insens, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"D"')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("c", :insens, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"C"')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("d", :insens, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"D"')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          if (match_len = has_terminal?("e", :insens, index))
            r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"E"')
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r2 = r5
          else
            if (match_len = has_terminal?("f", :insens, index))
              r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"F"')
              r6 = nil
            end
            if r6
              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
              r2 = r6
            else
              @index = i2
              r2 = nil
            end
          end
        end
      end
      s0 << r2
      if r2
        s7, i7 = [], index
        loop do
          r8 = _nt_HEXDIG
          if r8
            s7 << r8
          else
            break
          end
          if s7.size == 2
            break
          end
        end
        if s7.size < 2
          @index = i7
          r7 = nil
        else
          if s7.size < 2
            @terminal_failures.pop
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LowSurrogate0)
      r0.extend(LowSurrogate1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:low_surrogate][start_index] = r0

    r0
  end

  def _nt_unescaped
    start_index = index
    if node_cache[:unescaped].has_key?(index)
      cached = node_cache[:unescaped][index]
      if cached
        node_cache[:unescaped][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("\n", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"\\n"')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("\r", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"\\r"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if has_terminal?(@regexps[gr = '\A[\\ -!]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[\\ -!]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if has_terminal?(@regexps[gr = '\A[\\#-&]'] ||= Regexp.new(gr), :regexp, index)
            r4 = true
            @index += 1
          else
            terminal_parse_failure('[\\#-&]')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if has_terminal?(@regexps[gr = '\A[\\(-\\[]'] ||= Regexp.new(gr), :regexp, index)
              r5 = true
              @index += 1
            else
              terminal_parse_failure('[\\(-\\[]')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if has_terminal?(@regexps[gr = '\A[\\]-􏿿]'] ||= Regexp.new(gr), :regexp, index)
                r6 = true
                @index += 1
              else
                terminal_parse_failure('[\\]-􏿿]')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:unescaped][start_index] = r0

    r0
  end

  def _nt_DQUOTE
    start_index = index
    if node_cache[:DQUOTE].has_key?(index)
      cached = node_cache[:DQUOTE][index]
      if cached
        node_cache[:DQUOTE][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?("\"", false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"\\""')
      r0 = nil
    end

    node_cache[:DQUOTE][start_index] = r0

    r0
  end

  def _nt_DIGIT
    start_index = index
    if node_cache[:DIGIT].has_key?(index)
      cached = node_cache[:DIGIT][index]
      if cached
        node_cache[:DIGIT][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[0-9]')
      r0 = nil
    end

    node_cache[:DIGIT][start_index] = r0

    r0
  end

  def _nt_DIGIT1
    start_index = index
    if node_cache[:DIGIT1].has_key?(index)
      cached = node_cache[:DIGIT1][index]
      if cached
        node_cache[:DIGIT1][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[1-9]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[1-9]')
      r0 = nil
    end

    node_cache[:DIGIT1][start_index] = r0

    r0
  end

  def _nt_ODIGIT
    start_index = index
    if node_cache[:ODIGIT].has_key?(index)
      cached = node_cache[:ODIGIT][index]
      if cached
        node_cache[:ODIGIT][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[0-7]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[0-7]')
      r0 = nil
    end

    node_cache[:ODIGIT][start_index] = r0

    r0
  end

  def _nt_BDIGIT
    start_index = index
    if node_cache[:BDIGIT].has_key?(index)
      cached = node_cache[:BDIGIT][index]
      if cached
        node_cache[:BDIGIT][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[0-1]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[0-1]')
      r0 = nil
    end

    node_cache[:BDIGIT][start_index] = r0

    r0
  end

  def _nt_HEXDIG
    start_index = index
    if node_cache[:HEXDIG].has_key?(index)
      cached = node_cache[:HEXDIG][index]
      if cached
        node_cache[:HEXDIG][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_DIGIT
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("a", :insens, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"A"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("b", :insens, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"B"')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?("c", :insens, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"C"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if (match_len = has_terminal?("d", :insens, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"D"')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if (match_len = has_terminal?("e", :insens, index))
                r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"E"')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                if (match_len = has_terminal?("f", :insens, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"F"')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:HEXDIG][start_index] = r0

    r0
  end

  def _nt_lcalpha
    start_index = index
    if node_cache[:lcalpha].has_key?(index)
      cached = node_cache[:lcalpha][index]
      if cached
        node_cache[:lcalpha][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[a-z]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[a-z]')
      r0 = nil
    end

    node_cache[:lcalpha][start_index] = r0

    r0
  end

  def _nt_lcalnum
    start_index = index
    if node_cache[:lcalnum].has_key?(index)
      cached = node_cache[:lcalnum][index]
      if cached
        node_cache[:lcalnum][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_lcalpha
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_DIGIT
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:lcalnum][start_index] = r0

    r0
  end

  def _nt_ALPHA
    start_index = index
    if node_cache[:ALPHA].has_key?(index)
      cached = node_cache[:ALPHA][index]
      if cached
        node_cache[:ALPHA][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(@regexps[gr = '\A[A-Z]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[A-Z]')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_lcalpha
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:ALPHA][start_index] = r0

    r0
  end

end

class EDNGRAMMARParser < Treetop::Runtime::CompiledParser
  include EDNGRAMMAR
end

