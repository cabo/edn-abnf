#!/usr/bin/env ruby
# coding: utf-8-hfs
require 'pp'
require 'yaml'
require 'treetop'
require 'json'

require_relative '../lib/edn-abnf.rb'

def snaky(name)
  name.gsub(/-/, "_")
end
 
Encoding.default_external = Encoding::UTF_8
require 'optparse'
require 'ostruct'

$options = OpenStruct.new
begin
  op = OptionParser.new do |opts|
    opts.banner = "Usage: edn-abnf.rb [options] [file.edn... | -]"

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      $options.verbose = v
    end
    opts.on("-l", "--[no-]lines", "multi-line mode") do |v|
      require 'csv'
      $options.lines = v
    end
    opts.on("-eEDN", "--e=EDN", "supply EDN on command line") do |v|
      $options.edn = v
    end
    opts.on("-tFMT", "--to=FMT", [:basic, :neat, :json, :yaml, :edn, :diag], "Target format") do |v|
      $options.target = v
    end
  end
  op.parse!
rescue Exception => e
  warn e
  exit 1
end


if !$options.edn
  if ARGV == []
    puts op
    exit 1
  end
  $options.edn = ARGF.read
else
  if ARGV != []
    warn "*** file names #{ARGV.join(", ")} ignored due to -e given"
  end
end

edn_file = $options.edn

if $options.lines
  CSV.parse(edn_file) do |ok, edn, out|
    if ok[0] == "#"
      puts "# #{ok}, #{edn.inspect}, #{out}" if $options.verbose
      next
    end
    begin
      ok = ok == "="
      puts "➔ #{ok}, #{edn}, #{out}" if $options.verbose
      edn = EDN.from_edn(edn)
      result = edn.tree
      diag = result.cbor_diagnostic
      if out == diag && !ok
          puts "** ≠ / #{diag.inspect} / #{out.inspect}"
      end
      if out != diag && ok
          puts "** ≡ / #{diag.inspect} / #{out.inspect}"
      end
    rescue ArgumentError => e
      if ok
        puts "** #{e} / #{result.inspect} / #{out.inspect}"
      else
        if $options.verbose
          puts "expected failure #{e}"
        end
      end
    end
  end
  exit
end

begin
  edn = EDN.from_edn(edn_file)
  result = edn.tree               # XXX .tree?
rescue ArgumentError => e
  puts "** #{e}"
  exit 1
end

case $options.target
when :basic, nil
  pp result
when :neat, :json
  require 'neatjson'
  puts JSON.neat_generate(result, after_comma: 1, after_colon: 1)
when :yaml
  puts result.to_yaml
when :edn, :diag
  puts result.cbor_diagnostic
else
  warn ["Unknown target format: ", $options.target].inspect
end
